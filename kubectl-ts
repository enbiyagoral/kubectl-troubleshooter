#!/bin/bash

# Kubectl Troubleshooter (kubectl ts): Kubernetes issue analysis tool

TARGET_TYPE=$1
TARGET_NAME=$2
NAMESPACE="default"  # Default namespace
VALID_FLAGS=("--namespace" "--all-namespaces")  # Add --all-namespaces to valid flags

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Add helper functions at the beginning
print_header() {
    local title="$1"
    echo -e "\n${CYAN}=== $title ===${NC}"
}

print_section() {
    local title="$1"
    echo -e "\n${YELLOW}$title${NC}"
}

print_error() {
    local message="$1"
    echo -e "${RED}❌ $message${NC}"
}

print_success() {
    local message="$1"
    echo -e "${GREEN}✅ $message${NC}"
}

# Usage guide
usage() {
    echo -e "${CYAN}Kubectl Troubleshooter - Kubernetes Pod and Status Analysis Tool${NC}"
    echo "Usage:"
    echo "  kubectl ts pod <pod-name> [--namespace <namespace>]"
    echo "  kubectl ts pods --all-namespaces"
    echo "Options:"
    echo "  --namespace <namespace>  The namespace where the pod is located (default: 'default')."
    echo "  --help                   Show help message."
    echo "Examples:"
    echo "  kubectl ts pod my-app-pod --namespace production"
    echo "  kubectl ts pods --all-namespaces"
    exit 1
}

# Check for the help command
if [[ "$1" == "--help" ]]; then
    usage
fi

# If no arguments provided, show error and exit
if [[ -z "$1" ]]; then
    print_error "No arguments provided. Use --help for usage information."
    exit 1
fi

# Check for namespace parameter and invalid flags
while [[ $# -gt 0 ]]; do
    case "$1" in
        --namespace)
            if [[ -z "$2" ]]; then
                print_error "--namespace flag requires a value"
                exit 1
            fi
            # Validate namespace exists
            if ! kubectl get namespace "$2" &>/dev/null; then
                print_error "Namespace '$2' does not exist"
                exit 1
            fi
            NAMESPACE="$2"
            shift 2
            ;;
        --all-namespaces)
            ALL_NAMESPACES=true
            shift
            ;;
        --help)
            usage
            ;;
        --*)
            if [[ ! " ${VALID_FLAGS[*]} " =~ " $1 " ]]; then
                print_error "Invalid flag '$1'"
                exit 1
            fi
            ;;
        *)
            if [[ -z "$TARGET_TYPE" ]]; then
                TARGET_TYPE="$1"
            elif [[ -z "$TARGET_NAME" ]]; then
                TARGET_NAME="$1"
            fi
            shift
            ;;
    esac
done

# Analyze all pods across all namespaces
if [[ "$TARGET_TYPE" == "pods" && "$ALL_NAMESPACES" == "true" ]]; then
    RUNNING_PODS=0
    TOTAL_PODS=0
    FAILED_OUTPUT=""

    while read -r pod; do
        POD_NAME=$(echo "$pod" | jq -r '.metadata.name')
        POD_NAMESPACE=$(echo "$pod" | jq -r '.metadata.namespace')
        POD_PHASE=$(echo "$pod" | jq -r '.status.phase')
        ((TOTAL_PODS++))

        if [[ "$POD_PHASE" == "Running" ]]; then
            ((RUNNING_PODS++))
        else
            FAILED_OUTPUT+="$(echo -e "\n${RED}❌ Namespace: $POD_NAMESPACE, Pod: $POD_NAME is in state: $POD_PHASE${NC}")"
            FAILED_OUTPUT+="\nContainer Details:"
            
            while IFS=$'\t' read -r name state reason message; do
                FAILED_OUTPUT+="$(echo -e "\n  ${CYAN}Name:${NC} $name\n  ${CYAN}State:${NC} $state\n  ${YELLOW}Reason:${NC} $reason\n  ${RED}Message:${NC} $message")"
            done < <(echo "$pod" | jq -r '.status.containerStatuses[] | [
                .name,
                (.state | keys[0]),
                (.state[]?.reason // "N/A"),
                (.state[]?.message // "N/A")
            ] | @tsv')
            FAILED_OUTPUT+="\n"
        fi
    done < <(kubectl get pods --all-namespaces -o json | jq -c '.items[]')

    echo -e "${GREEN}✅ Running Pods: $RUNNING_PODS/$TOTAL_PODS${NC}"
    if [ $RUNNING_PODS -ne $TOTAL_PODS ]; then
        echo -e "\n${YELLOW}Problem Details for Non-Running Pods:${NC}"
        echo -e "$FAILED_OUTPUT"
    fi
    exit 0
fi

# Add after TARGET_NAME assignment
validate_pod_name() {
    local pod_name="$1"
    
    # Check if pod name is empty
    if [ -z "$pod_name" ]; then
        echo -e "${RED}❌ Error: Pod name is required${NC}"
        usage
    fi
    
    # Check pod name format
    if ! [[ "$pod_name" =~ ^[a-z0-9][a-z0-9-]*[a-z0-9]$ ]]; then
        echo -e "${RED}❌ Error: Invalid pod name format. Pod names must consist of lower case alphanumeric characters or '-'${NC}"
        exit 1
    fi
}

# Pod Analysis
if [ "$TARGET_TYPE" == "pod" ]; then
    validate_pod_name "$TARGET_NAME"
    POD_JSON=$(kubectl get pod "$TARGET_NAME" -n "$NAMESPACE" -o json 2>/dev/null)

    if [ -z "$POD_JSON" ]; then
        print_error "Pod '$TARGET_NAME' not found in namespace '$NAMESPACE'"
        exit 1
    fi

    POD_STATUS=$(echo "$POD_JSON" | jq -r '.status.phase')
    echo -e "${CYAN}Pod Status:${NC} $POD_STATUS"

    case $POD_STATUS in
        Running)
            print_success "Pod '$TARGET_NAME' is running successfully!"
            ;;
        Pending)
            echo -e "${YELLOW}⚠️  Pod '$TARGET_NAME' is in Pending state.${NC}"
            
            # Get container states and check for specific errors
            CONTAINER_STATES=$(echo "$POD_JSON" | jq -r '.status.containerStatuses[] | [
                .state | keys[0],
                (.state[]?.reason // "N/A")
            ] | @tsv')
            
            if echo "$CONTAINER_STATES" | grep -q "ImagePullBackOff\|ErrImagePull"; then
                echo "Suggested actions for ImagePullBackOff:"
                echo "- Check if image name and tag are correct in your pod specification"
                echo "- Check if the image exists in your container registry"
                echo "- Ensure your cluster has access to the container registry"
                echo "- If using a private registry, verify imagePullSecrets are properly configured"
                echo "- Run 'kubectl describe pod $TARGET_NAME -n $NAMESPACE' for more details"
            else
                echo "Suggested actions:"
                echo "- Check for insufficient node resources (e.g., CPU or Memory)."
                echo "- Run 'kubectl describe pod $TARGET_NAME -n $NAMESPACE' for more details."
            fi
            ;;
        Failed)
            print_error "Pod '$TARGET_NAME' has failed."
            echo "Suggested actions:"
            echo "- Run 'kubectl logs $TARGET_NAME -n $NAMESPACE' to check the logs."
            echo "- Check Events using 'kubectl describe pod $TARGET_NAME -n $NAMESPACE'."
            ;;
        *)
            echo -e "${YELLOW}ℹ️ Pod '$TARGET_NAME' is in state: $POD_STATUS${NC}"
            ;;
    esac

    echo -e "\nContainer Details:"
    echo "$POD_JSON" | jq -r '.status.containerStatuses[] | [
        .name,
        (.state | keys[0]),
        (.state[]?.reason // "N/A"),
        (.state[]?.message // "N/A")
    ] | @tsv' | while IFS=$'\t' read -r name state reason message; do
        echo -e "  ${CYAN}Name:${NC} $name\n  ${CYAN}State:${NC} $state\n  ${YELLOW}Reason:${NC} $reason\n  ${RED}Message:${NC} $message"
        
        case $reason in
            "ImagePullBackOff"|"ErrImagePull")
                echo -e "\n  ${YELLOW}Container-specific suggestions:${NC}"
                echo "  - Check if image name '$TARGET_NAME' is correct"
                echo "  - Verify you have access to the container registry"
                echo "  - Try pulling the image manually: 'docker pull <image-name>'"
                ;;
        esac
    done
    
    # Add recent events
    echo -e "\nRecent Events:"
    kubectl get events -n "$NAMESPACE" --field-selector involvedObject.name="$TARGET_NAME" \
        --sort-by='.lastTimestamp' | tail -n 5
    
    # Add restart count analysis
    RESTARTS=$(echo "$POD_JSON" | jq '.status.containerStatuses[].restartCount' | awk '{sum+=$1} END {print sum}')
    if [ "$RESTARTS" -gt 0 ]; then
        echo -e "\n${RED}⚠️ Pod has restarted $RESTARTS times${NC}"
        echo "Suggested actions:"
        echo "- Check pod logs for crash information"
        echo "- Verify resource limits and requests"
        echo "- Check liveness/readiness probe configuration"
    fi

    exit 0
fi

# Unknown target type
print_error "Unknown target type '$TARGET_TYPE'. Supported types are 'pod' or 'pods --all-namespaces'."
exit 1
